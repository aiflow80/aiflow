{"version":3,"file":"static/js/1517.2d0bfc0f.chunk.js","mappings":"wMASA,MAAMA,EAAuBC,EAAAA,cAAoB,MAWlC,SAASC,EAAWC,GACjC,MAAM,SACJC,EAAQ,MACRC,GACEF,EACEG,EAZR,WACE,MAAOC,EAAIC,GAASP,EAAAA,SAAe,MAInC,OAHAA,EAAAA,WAAgB,KACdO,EAAM,SAADC,OAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,WAAkB,GAChD,IACIL,CACT,CAMmBM,GACXC,EAAUb,EAAAA,SAAc,KACrB,CACLK,WACAD,WAED,CAACC,EAAUD,IACd,OAAoBU,EAAAA,EAAAA,KAAKf,EAAQgB,SAAU,CACzCX,MAAOS,EACPV,SAAUA,GAEd,CAmBO,SAASa,IACd,OAAOhB,EAAAA,WAAiBD,EAC1B,CACO,SAASkB,EAAWJ,EAAST,GAClC,MAAM,SACJC,GACEQ,EACJ,OAAiB,OAAbR,EACK,KAEF,GAAPG,OAAUK,EAAQR,SAAQ,OAAAG,OAAMJ,EAClC,CACO,SAASc,EAASL,EAAST,GAChC,MAAM,SACJC,GACEQ,EACJ,OAAiB,OAAbR,EACK,KAEF,GAAPG,OAAUK,EAAQR,SAAQ,OAAAG,OAAMJ,EAClC,C,4GC3Ea,MAAAe,EAAA,aA2Cb,EApC6BnB,EAAAA,YAAiB,SAAiBE,EAAOkB,GACpE,MACEjB,SAAUkB,GAERnB,EADCoB,GAAKC,EAAAA,EAAAA,GACNrB,EAAKiB,GACHN,GAAUG,EAAAA,EAAAA,MAChB,GAAgB,OAAZH,EACF,MAAM,IAAIW,UAAU,0BAEtB,MAAMrB,EAAWH,EAAAA,SAAeyB,IAAIJ,GAAcK,GAC7B1B,EAAAA,eAAqB0B,GAGpB1B,EAAAA,aAAmB0B,EAAO,CAE5C,iBAAiBT,EAAAA,EAAAA,IAAWJ,EAASa,EAAMxB,MAAME,OACjDE,IAAIY,EAAAA,EAAAA,IAASL,EAASa,EAAMxB,MAAME,SAL3B,OAQX,OAAoBU,EAAAA,EAAAA,KAAKa,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxBN,GAAK,IACRF,IAAKA,EACLhB,MAAOS,EAAQT,MACfD,SAAUA,IAEd,G","sources":["../node_modules/@mui/lab/TabContext/TabContext.js","../node_modules/@mui/lab/TabList/TabList.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @type {React.Context<{ idPrefix: string; value: string } | null>}\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Context = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  Context.displayName = 'TabContext';\n}\nfunction useUniquePrefix() {\n  const [id, setId] = React.useState(null);\n  React.useEffect(() => {\n    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);\n  }, []);\n  return id;\n}\nexport default function TabContext(props) {\n  const {\n    children,\n    value\n  } = props;\n  const idPrefix = useUniquePrefix();\n  const context = React.useMemo(() => {\n    return {\n      idPrefix,\n      value\n    };\n  }, [idPrefix, value]);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? TabContext.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The value of the currently selected `Tab`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\n\n/**\n * @returns {unknown}\n */\nexport function useTabContext() {\n  return React.useContext(Context);\n}\nexport function getPanelId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-P-${value}`;\n}\nexport function getTabId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-T-${value}`;\n}","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useTabContext, getTabId, getPanelId } from \"../TabContext/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n    children: childrenProp,\n    ...other\n  } = props;\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, {\n    ...other,\n    ref: ref,\n    value: context.value,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.node\n} : void 0;\nexport default TabList;"],"names":["Context","React","TabContext","props","children","value","idPrefix","id","setId","concat","Math","round","random","useUniquePrefix","context","_jsx","Provider","useTabContext","getPanelId","getTabId","_excluded","ref","childrenProp","other","_objectWithoutProperties","TypeError","map","child","Tabs","_objectSpread"],"sourceRoot":""}