{"version":3,"file":"static/js/9787.0e0e93be.chunk.js","mappings":"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","sources":["../node_modules/@mui/lab/Masonry/masonryClasses.js","../node_modules/@mui/lab/Masonry/Masonry.js","../node_modules/@mui/material/styles/useThemeProps.js","../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js","../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js","../node_modules/@mui/utils/esm/setRef/setRef.js","../node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js","../node_modules/@mui/utils/esm/useForkRef/useForkRef.js"],"sourcesContent":["import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getMasonryUtilityClass(slot) {\n  return generateUtilityClass('MuiMasonry', slot);\n}\nconst masonryClasses = generateUtilityClasses('MuiMasonry', ['root']);\nexport default masonryClasses;","'use client';\n\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport * as ReactDOM from 'react-dom';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from \"./masonryClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const parseToNumber = val => {\n  return Number(val.replace('px', ''));\n};\nconst lineBreakStyle = {\n  flexBasis: '100%',\n  width: 0,\n  margin: 0,\n  padding: 0\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n};\nexport const getStyle = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'flex-start',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {};\n  // Only applicable for Server-Side Rendering\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = parseToNumber(theme.spacing(ownerState.defaultSpacing));\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = {\n      ...styles['& > *'],\n      ...orderStyleSSR,\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    };\n    return {\n      ...styles,\n      ...stylesSSR\n    };\n  }\n  const spacingValues = resolveBreakpointValues({\n    values: ownerState.spacing,\n    breakpoints: theme.breakpoints.values\n  });\n  const transformer = createUnarySpacing(theme);\n  const spacingStyleFromPropValue = propValue => {\n    let spacing;\n    // in case of string/number value\n    if (typeof propValue === 'string' && !Number.isNaN(Number(propValue)) || typeof propValue === 'number') {\n      const themeSpacingValue = Number(propValue);\n      spacing = getValue(transformer, themeSpacingValue);\n    } else {\n      spacing = propValue;\n    }\n    return {\n      margin: `calc(0px - (${spacing} / 2))`,\n      '& > *': {\n        margin: `calc(${spacing} / 2)`\n      },\n      ...(ownerState.maxColumnHeight && {\n        height: typeof spacing === 'number' ? Math.ceil(ownerState.maxColumnHeight + parseToNumber(spacing)) : `calc(${ownerState.maxColumnHeight}px + ${spacing})`\n      })\n    };\n  };\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnValues = resolveBreakpointValues({\n    values: ownerState.columns,\n    breakpoints: theme.breakpoints.values\n  });\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues === 'string' && !Number.isNaN(Number(spacingValues)) || typeof spacingValues === 'number' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue));\n\n  // configure width for responsive spacing values\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n      return null;\n    }));\n  }\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    columns = 4,\n    spacing = 1,\n    sequential = false,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    ...other\n  } = props;\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n  const ownerState = {\n    ...props,\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleResize = React.useCallback(masonryChildren => {\n    if (!masonryRef.current || !masonryChildren || masonryChildren.length === 0) {\n      return;\n    }\n    const masonry = masonryRef.current;\n    const masonryFirstChild = masonryRef.current.firstChild;\n    const parentWidth = masonry.clientWidth;\n    const firstChildWidth = masonryFirstChild.clientWidth;\n    if (parentWidth === 0 || firstChildWidth === 0) {\n      return;\n    }\n    const firstChildComputedStyle = window.getComputedStyle(masonryFirstChild);\n    const firstChildMarginLeft = parseToNumber(firstChildComputedStyle.marginLeft);\n    const firstChildMarginRight = parseToNumber(firstChildComputedStyle.marginRight);\n    const currentNumberOfColumns = Math.round(parentWidth / (firstChildWidth + firstChildMarginLeft + firstChildMarginRight));\n    const columnHeights = new Array(currentNumberOfColumns).fill(0);\n    let skip = false;\n    let nextOrder = 1;\n    masonry.childNodes.forEach(child => {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n        return;\n      }\n      const childComputedStyle = window.getComputedStyle(child);\n      const childMarginTop = parseToNumber(childComputedStyle.marginTop);\n      const childMarginBottom = parseToNumber(childComputedStyle.marginBottom);\n      // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n      const childHeight = parseToNumber(childComputedStyle.height) ? Math.ceil(parseToNumber(childComputedStyle.height)) + childMarginTop + childMarginBottom : 0;\n      if (childHeight === 0) {\n        skip = true;\n        return;\n      }\n      // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n      for (let i = 0; i < child.childNodes.length; i += 1) {\n        const nestedChild = child.childNodes[i];\n        if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n          skip = true;\n          break;\n        }\n      }\n      if (!skip) {\n        if (sequential) {\n          columnHeights[nextOrder - 1] += childHeight;\n          child.style.order = nextOrder;\n          nextOrder += 1;\n          if (nextOrder > currentNumberOfColumns) {\n            nextOrder = 1;\n          }\n        } else {\n          // find the current shortest column (where the current item will be placed)\n          const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n          columnHeights[currentMinColumnIndex] += childHeight;\n          const order = currentMinColumnIndex + 1;\n          child.style.order = order;\n        }\n      }\n    });\n    if (!skip) {\n      // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n      // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n      // Related issue - https://github.com/facebook/react/issues/24331\n      ReactDOM.flushSync(() => {\n        setMaxColumnHeight(Math.max(...columnHeights));\n        setNumberOfLineBreaks(currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0);\n      });\n    }\n  }, [sequential]);\n  useEnhancedEffect(() => {\n    // IE and old browsers are not supported\n    if (typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    let animationFrame;\n    const resizeObserver = new ResizeObserver(() => {\n      // see https://github.com/mui/material-ui/issues/36909\n      animationFrame = requestAnimationFrame(handleResize);\n    });\n    if (masonryRef.current) {\n      masonryRef.current.childNodes.forEach(childNode => {\n        resizeObserver.observe(childNode);\n      });\n    }\n    return () => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame);\n      }\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [columns, spacing, children, handleResize]);\n  const handleRef = useForkRef(ref, masonryRef);\n\n  //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: {\n      ...lineBreakStyle,\n      order: index + 1\n    }\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState,\n    ...other,\n    children: [children, lineBreaks]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes /* @typescript-to-proptypes-ignore */.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n  /**\n   * Allows using sequential order rather than adding to shortest column\n   * @default false\n   */\n  sequential: PropTypes.bool,\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;","'use client';\n\nimport systemUseThemeProps from '@mui/system/useThemeProps';\nimport defaultTheme from \"./defaultTheme.js\";\nimport THEME_ID from \"./identifier.js\";\nexport default function useThemeProps({\n  props,\n  name\n}) {\n  return systemUseThemeProps({\n    props,\n    name,\n    defaultTheme,\n    themeId: THEME_ID\n  });\n}","import resolveProps from '@mui/utils/resolveProps';\nexport default function getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {\n    return props;\n  }\n  return resolveProps(theme.components[name].defaultProps, props);\n}","'use client';\n\nimport getThemeProps from \"./getThemeProps.js\";\nimport useTheme from \"../useTheme/index.js\";\nexport default function useThemeProps({\n  props,\n  name,\n  defaultTheme,\n  themeId\n}) {\n  let theme = useTheme(defaultTheme);\n  if (themeId) {\n    theme = theme[themeId] || theme;\n  }\n  return getThemeProps({\n    theme,\n    name,\n    props\n  });\n}","/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","'use client';\n\nimport * as React from 'react';\n\n/**\n * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.\n * This is useful for effects that are only needed for client-side rendering but not for SSR.\n *\n * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * and confirm it doesn't apply to your use-case.\n */\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;","'use client';\n\nimport * as React from 'react';\nimport setRef from \"../setRef/index.js\";\n\n/**\n * Takes an array of refs and returns a new ref which will apply any modification to all of the refs.\n * This is useful when you want to have the ref used in multiple places.\n *\n * ```tsx\n * const rootRef = React.useRef<Instance>(null);\n * const refFork = useForkRef(rootRef, props.ref);\n *\n * return (\n *   <Root {...props} ref={refFork} />\n * );\n * ```\n *\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\n */\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}"],"names":["getMasonryUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","parseToNumber","val","Number","replace","lineBreakStyle","flexBasis","width","margin","padding","MasonryRoot","styled","name","overridesResolver","props","styles","root","_ref","ownerState","theme","display","flexFlow","alignContent","boxSizing","stylesSSR","isSSR","orderStyleSSR","defaultSpacing","spacing","i","defaultColumns","concat","order","height","defaultHeight","_objectSpread","toFixed","spacingValues","resolveBreakpointValues","values","breakpoints","transformer","createUnarySpacing","deepmerge","handleBreakpoints","propValue","isNaN","themeSpacingValue","getValue","maxColumnHeight","Math","ceil","columnValues","columns","columnValue","breakpoint","lastBreakpoint","Object","keys","pop","column","React","inProps","ref","useThemeProps","children","className","component","sequential","other","_objectWithoutProperties","masonryRef","setMaxColumnHeight","undefined","numberOfLineBreaks","setNumberOfLineBreaks","classes","composeClasses","useUtilityClasses","handleResize","masonryChildren","current","length","masonry","masonryFirstChild","firstChild","parentWidth","clientWidth","firstChildWidth","firstChildComputedStyle","window","getComputedStyle","firstChildMarginLeft","marginLeft","firstChildMarginRight","marginRight","currentNumberOfColumns","round","columnHeights","Array","fill","skip","nextOrder","childNodes","forEach","child","nodeType","Node","ELEMENT_NODE","dataset","class","childComputedStyle","childMarginTop","marginTop","childMarginBottom","marginBottom","childHeight","nestedChild","tagName","clientHeight","style","currentMinColumnIndex","indexOf","min","ReactDOM","max","useEnhancedEffect","ResizeObserver","animationFrame","resizeObserver","requestAnimationFrame","childNode","observe","cancelAnimationFrame","disconnect","handleRef","useForkRef","lineBreaks","map","_","index","_jsx","_jsxs","as","clsx","systemUseThemeProps","defaultTheme","themeId","THEME_ID","getThemeProps","params","components","defaultProps","resolveProps","useTheme","setRef","value","_len","arguments","refs","_key","every","instance"],"sourceRoot":""}